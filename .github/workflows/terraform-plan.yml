name: "Terraform Plan"

on:
  workflow_dispatch:
  pull_request:

env:
  TF_CLOUD_ORGANIZATION: "toastboy"
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
  TF_WORKSPACE: "tf-bootstrap"
  CONFIG_DIRECTORY: "./"

  TF_VAR_github_repository: '"${{ github.repository }}"'
  TF_VAR_github_run_id: '"${{ github.run_id }}"'
  TF_VAR_github_server_url: '"${{ github.server_url }}"'
  TF_VAR_github_sha: '"${{ github.sha }}"'

jobs:
  terraform:
    name: "Terraform Plan"
    runs-on: self-hosted
    permissions:
      # so GitHub can check out this repo using the default github.token
      contents: read
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Load secrets from 1Password and export to environment
        uses: 1password/load-secrets-action@v2
        with:
          export-env: true
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          AZURE_TENANT_ID: op://next-www-toastboy/TF_AZURE_TENANT_ID/Section_elpyzkswpwjdt45ytdpuj4zpri/uuid
          AZURE_SUBSCRIPTION_ID: op://next-www-toastboy/AZURE_SUBSCRIPTION_ID/Section_u2slseexl7iz6qq3ab3kwfut5u/uuid
          AZURE_CLIENT_ID: op://next-www-toastboy/TF_AZURE_CLIENT_ID/Section_sbgupoixcvisaemyfdnssgod3u/uuid
          AZURE_CLIENT_SECRET: op://next-www-toastboy/TF_AZURE_CLIENT_SECRET/Section_al3t4lplsritwudt5bbhjxh4e4/uuid

      - name: Upload Configuration
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.3.2
        id: plan-upload
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          directory: ${{ env.CONFIG_DIRECTORY }}
          token: ${{ secrets.TF_API_TOKEN }}
          speculative: true
        env:
          TF_VAR_azure_tenant_id: '"${{ env.AZURE_TENANT_ID }}"'
          TF_VAR_azure_subscription_id: '"${{ env.AZURE_SUBSCRIPTION_ID }}"'
          TF_VAR_azure_client_id: '"${{ env.AZURE_CLIENT_ID }}"'
          TF_VAR_azure_client_secret: '"${{ env.AZURE_CLIENT_SECRET }}"'

      - name: Create Plan Run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.3.2
        id: plan-run
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          configuration_version: ${{ steps.plan-upload.outputs.configuration_version_id }}
          plan_only: true
        env:
          TF_VAR_azure_tenant_id: '"${{ env.AZURE_TENANT_ID }}"'
          TF_VAR_azure_subscription_id: '"${{ env.AZURE_SUBSCRIPTION_ID }}"'
          TF_VAR_azure_client_id: '"${{ env.AZURE_CLIENT_ID }}"'
          TF_VAR_azure_client_secret: '"${{ env.AZURE_CLIENT_SECRET }}"'

      - name: Get Plan Output
        uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.3.2
        id: plan-output
        with:
          plan: ${{ fromJSON(steps.plan-run.outputs.payload).data.relationships.plan.data.id }}

      - name: Update PR
        uses: actions/github-script@v7
        id: plan-comment
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Cloud Plan Output')
            });
            const output = `#### Terraform Cloud Plan Output
               \`\`\`
               Plan: ${{ steps.plan-output.outputs.add }} to add, ${{ steps.plan-output.outputs.change }} to change, ${{ steps.plan-output.outputs.destroy }} to destroy.
               \`\`\`
               [Terraform Cloud Plan](${{ steps.plan-run.outputs.run_link }})
               `;
            // 3. Delete previous comment so PR timeline makes sense
            if (botComment) {
              github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
              });
            }
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });
